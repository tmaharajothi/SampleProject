(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
const ko = require('knockout');
const octicons = require('octicons');
const components = require('ungit-components');
const programEvents = require('ungit-program-events');

components.register('repository', args => new RepositoryViewModel(args.server, args.path));

class RepositoryViewModel {
  constructor(server, path) {
    this.server = server;
    this.isBareDir = path.status() === 'bare';
    this.repoPath = path.repoPath;
    this.gitErrors = components.create('gitErrors', { server, repoPath: this.repoPath });
    this.graph = components.create('graph', { server, repoPath: this.repoPath });
    this.remotes = components.create('remotes', { server, repoPath: this.repoPath });
    this.submodules = components.create('submodules', { server, repoPath: this.repoPath });
    this.stash = this.isBareDir ? {} : components.create('stash', { server, repoPath: this.repoPath });
    this.staging = this.isBareDir ? {} : components.create('staging', { server, repoPath: this.repoPath, graph: this.graph });
    this.branches = components.create('branches', { server, graph: this.graph, repoPath: this.repoPath });
    this.repoPath.subscribe(value => { this.sever.watchRepository(value); });
    this.server.watchRepository(this.repoPath());
    this.showLog = this.isBareDir ? ko.observable(true) : this.staging.isStageValid;
    this.parentModulePath = ko.observable();
    this.parentModuleLink = ko.observable();
    this.isSubmodule = ko.computed(() => this.parentModulePath() && this.parentModuleLink());
    this.refreshSubmoduleStatus();
    if (window.location.search.includes('noheader=true')) {
      this.refreshButton = components.create('refreshbutton', { isLarge: false });
    } else {
      this.refreshButton = false;
    }
    this.ignoreIcon = octicons.file.toSVG({ 'height': 18 });
  }

  updateNode(parentElement) {
    ko.renderTemplate('repository', this, {}, parentElement);
  }

  onProgramEvent(event) {
    if (this.gitErrors.onProgramEvent) this.gitErrors.onProgramEvent(event);
    if (this.graph.onProgramEvent) this.graph.onProgramEvent(event);
    if (this.staging.onProgramEvent) this.staging.onProgramEvent(event);
    if (this.stash.onProgramEvent) this.stash.onProgramEvent(event);
    if (this.remotes.onProgramEvent) this.remotes.onProgramEvent(event);
    if (this.submodules.onProgramEvent) this.submodules.onProgramEvent(event);
    if (this.branches.onProgramEvent) this.branches.onProgramEvent(event);
    if (event.event == 'connected') this.server.watchRepository(this.repoPath());

    // If we get a reconnect event it's usually because the server crashed and then restarted
    // or something like that, so we need to tell it to start watching the path again
  }

  updateAnimationFrame(deltaT) {
    if (this.graph.updateAnimationFrame) this.graph.updateAnimationFrame(deltaT);
  }

  refreshSubmoduleStatus() {
    return this.server.getPromise('/baserepopath', { path: this.repoPath() })
      .then(baseRepoPath => {
        if (baseRepoPath.path) {
          return this.server.getProimse('/submodules', { path: baseRepoPath.path })
            .then(submodules => {
              if (Array.isArray(submodules)) {
                const baseName = this.repoPath().substring(baseRepoPath.path.length + 1);
                for (let n = 0; n < submodules.length; n++) {
                  if (submodules[n].path === baseName) {
                    this.parentModulePath(baseRepoPath.path);
                    this.parentModuleLink(`/#/repository?path=${encodeURIComponent(baseRepoPath.path)}`);
                    return;
                  }
                }
              }
            });
        }
      }).catch(err => {
        this.parentModuleLink(undefined);
        this.parentModulePath(undefined);
      });
  }

  editGitignore() {
    return this.server.getPromise('/gitignore', { path: this.repoPath() })
      .then((res) => {
        return components.create('texteditdialog', { title: `${this.repoPath()}${ungit.config.fileSeparator}.gitignore`, content: res.content })
          .show()
          .closeThen(diag => {
            if (diag.result()) {
              return this.server.putPromise('/gitignore', { path: this.repoPath(), data: diag.textAreaContent });
            }
          });
      }).catch(e => {
        // Not a git error but we are going to treat like one
        programEvents.dispatch({ event: 'git-error', data: {
          command: `fs.write "${this.repoPath()}${ungit.config.fileSeparator}.gitignore"`,
          error: e.message || e.errorSummary,
          stdout: '',
          stderr: e.stack,
          repoPath: this.repoPath()
        }});
      });
  }
}

},{"knockout":"knockout","octicons":undefined,"ungit-components":"ungit-components","ungit-program-events":"ungit-program-events"}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJjb21wb25lbnRzL3JlcG9zaXRvcnkvcmVwb3NpdG9yeS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQ0FBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24oKXtmdW5jdGlvbiByKGUsbix0KXtmdW5jdGlvbiBvKGksZil7aWYoIW5baV0pe2lmKCFlW2ldKXt2YXIgYz1cImZ1bmN0aW9uXCI9PXR5cGVvZiByZXF1aXJlJiZyZXF1aXJlO2lmKCFmJiZjKXJldHVybiBjKGksITApO2lmKHUpcmV0dXJuIHUoaSwhMCk7dmFyIGE9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitpK1wiJ1wiKTt0aHJvdyBhLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsYX12YXIgcD1uW2ldPXtleHBvcnRzOnt9fTtlW2ldWzBdLmNhbGwocC5leHBvcnRzLGZ1bmN0aW9uKHIpe3ZhciBuPWVbaV1bMV1bcl07cmV0dXJuIG8obnx8cil9LHAscC5leHBvcnRzLHIsZSxuLHQpfXJldHVybiBuW2ldLmV4cG9ydHN9Zm9yKHZhciB1PVwiZnVuY3Rpb25cIj09dHlwZW9mIHJlcXVpcmUmJnJlcXVpcmUsaT0wO2k8dC5sZW5ndGg7aSsrKW8odFtpXSk7cmV0dXJuIG99cmV0dXJuIHJ9KSgpIiwiY29uc3Qga28gPSByZXF1aXJlKCdrbm9ja291dCcpO1xuY29uc3Qgb2N0aWNvbnMgPSByZXF1aXJlKCdvY3RpY29ucycpO1xuY29uc3QgY29tcG9uZW50cyA9IHJlcXVpcmUoJ3VuZ2l0LWNvbXBvbmVudHMnKTtcbmNvbnN0IHByb2dyYW1FdmVudHMgPSByZXF1aXJlKCd1bmdpdC1wcm9ncmFtLWV2ZW50cycpO1xuXG5jb21wb25lbnRzLnJlZ2lzdGVyKCdyZXBvc2l0b3J5JywgYXJncyA9PiBuZXcgUmVwb3NpdG9yeVZpZXdNb2RlbChhcmdzLnNlcnZlciwgYXJncy5wYXRoKSk7XG5cbmNsYXNzIFJlcG9zaXRvcnlWaWV3TW9kZWwge1xuICBjb25zdHJ1Y3RvcihzZXJ2ZXIsIHBhdGgpIHtcbiAgICB0aGlzLnNlcnZlciA9IHNlcnZlcjtcbiAgICB0aGlzLmlzQmFyZURpciA9IHBhdGguc3RhdHVzKCkgPT09ICdiYXJlJztcbiAgICB0aGlzLnJlcG9QYXRoID0gcGF0aC5yZXBvUGF0aDtcbiAgICB0aGlzLmdpdEVycm9ycyA9IGNvbXBvbmVudHMuY3JlYXRlKCdnaXRFcnJvcnMnLCB7IHNlcnZlciwgcmVwb1BhdGg6IHRoaXMucmVwb1BhdGggfSk7XG4gICAgdGhpcy5ncmFwaCA9IGNvbXBvbmVudHMuY3JlYXRlKCdncmFwaCcsIHsgc2VydmVyLCByZXBvUGF0aDogdGhpcy5yZXBvUGF0aCB9KTtcbiAgICB0aGlzLnJlbW90ZXMgPSBjb21wb25lbnRzLmNyZWF0ZSgncmVtb3RlcycsIHsgc2VydmVyLCByZXBvUGF0aDogdGhpcy5yZXBvUGF0aCB9KTtcbiAgICB0aGlzLnN1Ym1vZHVsZXMgPSBjb21wb25lbnRzLmNyZWF0ZSgnc3VibW9kdWxlcycsIHsgc2VydmVyLCByZXBvUGF0aDogdGhpcy5yZXBvUGF0aCB9KTtcbiAgICB0aGlzLnN0YXNoID0gdGhpcy5pc0JhcmVEaXIgPyB7fSA6IGNvbXBvbmVudHMuY3JlYXRlKCdzdGFzaCcsIHsgc2VydmVyLCByZXBvUGF0aDogdGhpcy5yZXBvUGF0aCB9KTtcbiAgICB0aGlzLnN0YWdpbmcgPSB0aGlzLmlzQmFyZURpciA/IHt9IDogY29tcG9uZW50cy5jcmVhdGUoJ3N0YWdpbmcnLCB7IHNlcnZlciwgcmVwb1BhdGg6IHRoaXMucmVwb1BhdGgsIGdyYXBoOiB0aGlzLmdyYXBoIH0pO1xuICAgIHRoaXMuYnJhbmNoZXMgPSBjb21wb25lbnRzLmNyZWF0ZSgnYnJhbmNoZXMnLCB7IHNlcnZlciwgZ3JhcGg6IHRoaXMuZ3JhcGgsIHJlcG9QYXRoOiB0aGlzLnJlcG9QYXRoIH0pO1xuICAgIHRoaXMucmVwb1BhdGguc3Vic2NyaWJlKHZhbHVlID0+IHsgdGhpcy5zZXZlci53YXRjaFJlcG9zaXRvcnkodmFsdWUpOyB9KTtcbiAgICB0aGlzLnNlcnZlci53YXRjaFJlcG9zaXRvcnkodGhpcy5yZXBvUGF0aCgpKTtcbiAgICB0aGlzLnNob3dMb2cgPSB0aGlzLmlzQmFyZURpciA/IGtvLm9ic2VydmFibGUodHJ1ZSkgOiB0aGlzLnN0YWdpbmcuaXNTdGFnZVZhbGlkO1xuICAgIHRoaXMucGFyZW50TW9kdWxlUGF0aCA9IGtvLm9ic2VydmFibGUoKTtcbiAgICB0aGlzLnBhcmVudE1vZHVsZUxpbmsgPSBrby5vYnNlcnZhYmxlKCk7XG4gICAgdGhpcy5pc1N1Ym1vZHVsZSA9IGtvLmNvbXB1dGVkKCgpID0+IHRoaXMucGFyZW50TW9kdWxlUGF0aCgpICYmIHRoaXMucGFyZW50TW9kdWxlTGluaygpKTtcbiAgICB0aGlzLnJlZnJlc2hTdWJtb2R1bGVTdGF0dXMoKTtcbiAgICBpZiAod2luZG93LmxvY2F0aW9uLnNlYXJjaC5pbmNsdWRlcygnbm9oZWFkZXI9dHJ1ZScpKSB7XG4gICAgICB0aGlzLnJlZnJlc2hCdXR0b24gPSBjb21wb25lbnRzLmNyZWF0ZSgncmVmcmVzaGJ1dHRvbicsIHsgaXNMYXJnZTogZmFsc2UgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucmVmcmVzaEJ1dHRvbiA9IGZhbHNlO1xuICAgIH1cbiAgICB0aGlzLmlnbm9yZUljb24gPSBvY3RpY29ucy5maWxlLnRvU1ZHKHsgJ2hlaWdodCc6IDE4IH0pO1xuICB9XG5cbiAgdXBkYXRlTm9kZShwYXJlbnRFbGVtZW50KSB7XG4gICAga28ucmVuZGVyVGVtcGxhdGUoJ3JlcG9zaXRvcnknLCB0aGlzLCB7fSwgcGFyZW50RWxlbWVudCk7XG4gIH1cblxuICBvblByb2dyYW1FdmVudChldmVudCkge1xuICAgIGlmICh0aGlzLmdpdEVycm9ycy5vblByb2dyYW1FdmVudCkgdGhpcy5naXRFcnJvcnMub25Qcm9ncmFtRXZlbnQoZXZlbnQpO1xuICAgIGlmICh0aGlzLmdyYXBoLm9uUHJvZ3JhbUV2ZW50KSB0aGlzLmdyYXBoLm9uUHJvZ3JhbUV2ZW50KGV2ZW50KTtcbiAgICBpZiAodGhpcy5zdGFnaW5nLm9uUHJvZ3JhbUV2ZW50KSB0aGlzLnN0YWdpbmcub25Qcm9ncmFtRXZlbnQoZXZlbnQpO1xuICAgIGlmICh0aGlzLnN0YXNoLm9uUHJvZ3JhbUV2ZW50KSB0aGlzLnN0YXNoLm9uUHJvZ3JhbUV2ZW50KGV2ZW50KTtcbiAgICBpZiAodGhpcy5yZW1vdGVzLm9uUHJvZ3JhbUV2ZW50KSB0aGlzLnJlbW90ZXMub25Qcm9ncmFtRXZlbnQoZXZlbnQpO1xuICAgIGlmICh0aGlzLnN1Ym1vZHVsZXMub25Qcm9ncmFtRXZlbnQpIHRoaXMuc3VibW9kdWxlcy5vblByb2dyYW1FdmVudChldmVudCk7XG4gICAgaWYgKHRoaXMuYnJhbmNoZXMub25Qcm9ncmFtRXZlbnQpIHRoaXMuYnJhbmNoZXMub25Qcm9ncmFtRXZlbnQoZXZlbnQpO1xuICAgIGlmIChldmVudC5ldmVudCA9PSAnY29ubmVjdGVkJykgdGhpcy5zZXJ2ZXIud2F0Y2hSZXBvc2l0b3J5KHRoaXMucmVwb1BhdGgoKSk7XG5cbiAgICAvLyBJZiB3ZSBnZXQgYSByZWNvbm5lY3QgZXZlbnQgaXQncyB1c3VhbGx5IGJlY2F1c2UgdGhlIHNlcnZlciBjcmFzaGVkIGFuZCB0aGVuIHJlc3RhcnRlZFxuICAgIC8vIG9yIHNvbWV0aGluZyBsaWtlIHRoYXQsIHNvIHdlIG5lZWQgdG8gdGVsbCBpdCB0byBzdGFydCB3YXRjaGluZyB0aGUgcGF0aCBhZ2FpblxuICB9XG5cbiAgdXBkYXRlQW5pbWF0aW9uRnJhbWUoZGVsdGFUKSB7XG4gICAgaWYgKHRoaXMuZ3JhcGgudXBkYXRlQW5pbWF0aW9uRnJhbWUpIHRoaXMuZ3JhcGgudXBkYXRlQW5pbWF0aW9uRnJhbWUoZGVsdGFUKTtcbiAgfVxuXG4gIHJlZnJlc2hTdWJtb2R1bGVTdGF0dXMoKSB7XG4gICAgcmV0dXJuIHRoaXMuc2VydmVyLmdldFByb21pc2UoJy9iYXNlcmVwb3BhdGgnLCB7IHBhdGg6IHRoaXMucmVwb1BhdGgoKSB9KVxuICAgICAgLnRoZW4oYmFzZVJlcG9QYXRoID0+IHtcbiAgICAgICAgaWYgKGJhc2VSZXBvUGF0aC5wYXRoKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuc2VydmVyLmdldFByb2ltc2UoJy9zdWJtb2R1bGVzJywgeyBwYXRoOiBiYXNlUmVwb1BhdGgucGF0aCB9KVxuICAgICAgICAgICAgLnRoZW4oc3VibW9kdWxlcyA9PiB7XG4gICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHN1Ym1vZHVsZXMpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgYmFzZU5hbWUgPSB0aGlzLnJlcG9QYXRoKCkuc3Vic3RyaW5nKGJhc2VSZXBvUGF0aC5wYXRoLmxlbmd0aCArIDEpO1xuICAgICAgICAgICAgICAgIGZvciAobGV0IG4gPSAwOyBuIDwgc3VibW9kdWxlcy5sZW5ndGg7IG4rKykge1xuICAgICAgICAgICAgICAgICAgaWYgKHN1Ym1vZHVsZXNbbl0ucGF0aCA9PT0gYmFzZU5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wYXJlbnRNb2R1bGVQYXRoKGJhc2VSZXBvUGF0aC5wYXRoKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wYXJlbnRNb2R1bGVMaW5rKGAvIy9yZXBvc2l0b3J5P3BhdGg9JHtlbmNvZGVVUklDb21wb25lbnQoYmFzZVJlcG9QYXRoLnBhdGgpfWApO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSkuY2F0Y2goZXJyID0+IHtcbiAgICAgICAgdGhpcy5wYXJlbnRNb2R1bGVMaW5rKHVuZGVmaW5lZCk7XG4gICAgICAgIHRoaXMucGFyZW50TW9kdWxlUGF0aCh1bmRlZmluZWQpO1xuICAgICAgfSk7XG4gIH1cblxuICBlZGl0R2l0aWdub3JlKCkge1xuICAgIHJldHVybiB0aGlzLnNlcnZlci5nZXRQcm9taXNlKCcvZ2l0aWdub3JlJywgeyBwYXRoOiB0aGlzLnJlcG9QYXRoKCkgfSlcbiAgICAgIC50aGVuKChyZXMpID0+IHtcbiAgICAgICAgcmV0dXJuIGNvbXBvbmVudHMuY3JlYXRlKCd0ZXh0ZWRpdGRpYWxvZycsIHsgdGl0bGU6IGAke3RoaXMucmVwb1BhdGgoKX0ke3VuZ2l0LmNvbmZpZy5maWxlU2VwYXJhdG9yfS5naXRpZ25vcmVgLCBjb250ZW50OiByZXMuY29udGVudCB9KVxuICAgICAgICAgIC5zaG93KClcbiAgICAgICAgICAuY2xvc2VUaGVuKGRpYWcgPT4ge1xuICAgICAgICAgICAgaWYgKGRpYWcucmVzdWx0KCkpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2VydmVyLnB1dFByb21pc2UoJy9naXRpZ25vcmUnLCB7IHBhdGg6IHRoaXMucmVwb1BhdGgoKSwgZGF0YTogZGlhZy50ZXh0QXJlYUNvbnRlbnQgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICB9KS5jYXRjaChlID0+IHtcbiAgICAgICAgLy8gTm90IGEgZ2l0IGVycm9yIGJ1dCB3ZSBhcmUgZ29pbmcgdG8gdHJlYXQgbGlrZSBvbmVcbiAgICAgICAgcHJvZ3JhbUV2ZW50cy5kaXNwYXRjaCh7IGV2ZW50OiAnZ2l0LWVycm9yJywgZGF0YToge1xuICAgICAgICAgIGNvbW1hbmQ6IGBmcy53cml0ZSBcIiR7dGhpcy5yZXBvUGF0aCgpfSR7dW5naXQuY29uZmlnLmZpbGVTZXBhcmF0b3J9LmdpdGlnbm9yZVwiYCxcbiAgICAgICAgICBlcnJvcjogZS5tZXNzYWdlIHx8IGUuZXJyb3JTdW1tYXJ5LFxuICAgICAgICAgIHN0ZG91dDogJycsXG4gICAgICAgICAgc3RkZXJyOiBlLnN0YWNrLFxuICAgICAgICAgIHJlcG9QYXRoOiB0aGlzLnJlcG9QYXRoKClcbiAgICAgICAgfX0pO1xuICAgICAgfSk7XG4gIH1cbn1cbiJdfQ==
