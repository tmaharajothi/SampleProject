(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
const ko = require('knockout');
const octicons = require('octicons');
const components = require('ungit-components');

components.register('imagediff', args => new ImageDiffViewModel(args));

class ImageDiffViewModel {
  constructor(args) {
    this.filename = args.filename;
    this.oldFilename = args.oldFilename;
    this.repoPath = args.repoPath;
    this.isNew = ko.observable(false);
    this.isRemoved = ko.observable(false);
    this.sha1 = args.sha1;
    this.state = ko.computed(() => {
      if (this.isNew()) return 'new';
      if (this.isRemoved()) return 'removed';
      return 'changed';
    });
    const gitDiffURL = `${ungit.config.rootPath}/api/diff/image?path=${encodeURIComponent(this.repoPath())}`;
    this.oldImageSrc = gitDiffURL + `&filename=${this.oldFilename}&version=${(this.sha1 ? this.sha1 + '^' : 'HEAD')}`;
    this.newImageSrc = gitDiffURL + `&filename=${this.filename}&version=${(this.sha1 ? this.sha1 : 'current')}`;
    this.isShowingDiffs = args.isShowingDiffs;
    this.rightArrowIcon = octicons['arrow-right'].toSVG({ 'height': 100 });
    this.downArrowIcon = octicons['arrow-down'].toSVG({ 'height': 100 });
  }

  updateNode(parentElement) {
    ko.renderTemplate('imagediff', this, {}, parentElement);
  }

  invalidateDiff() {}

  newImageError() {
    this.isRemoved(true);
  }

  oldImageError() {
    this.isNew(true);
  }
}

},{"knockout":"knockout","octicons":undefined,"ungit-components":"ungit-components"}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJjb21wb25lbnRzL2ltYWdlZGlmZi9pbWFnZWRpZmYuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUNBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbigpe2Z1bmN0aW9uIHIoZSxuLHQpe2Z1bmN0aW9uIG8oaSxmKXtpZighbltpXSl7aWYoIWVbaV0pe3ZhciBjPVwiZnVuY3Rpb25cIj09dHlwZW9mIHJlcXVpcmUmJnJlcXVpcmU7aWYoIWYmJmMpcmV0dXJuIGMoaSwhMCk7aWYodSlyZXR1cm4gdShpLCEwKTt2YXIgYT1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK2krXCInXCIpO3Rocm93IGEuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixhfXZhciBwPW5baV09e2V4cG9ydHM6e319O2VbaV1bMF0uY2FsbChwLmV4cG9ydHMsZnVuY3Rpb24ocil7dmFyIG49ZVtpXVsxXVtyXTtyZXR1cm4gbyhufHxyKX0scCxwLmV4cG9ydHMscixlLG4sdCl9cmV0dXJuIG5baV0uZXhwb3J0c31mb3IodmFyIHU9XCJmdW5jdGlvblwiPT10eXBlb2YgcmVxdWlyZSYmcmVxdWlyZSxpPTA7aTx0Lmxlbmd0aDtpKyspbyh0W2ldKTtyZXR1cm4gb31yZXR1cm4gcn0pKCkiLCJjb25zdCBrbyA9IHJlcXVpcmUoJ2tub2Nrb3V0Jyk7XG5jb25zdCBvY3RpY29ucyA9IHJlcXVpcmUoJ29jdGljb25zJyk7XG5jb25zdCBjb21wb25lbnRzID0gcmVxdWlyZSgndW5naXQtY29tcG9uZW50cycpO1xuXG5jb21wb25lbnRzLnJlZ2lzdGVyKCdpbWFnZWRpZmYnLCBhcmdzID0+IG5ldyBJbWFnZURpZmZWaWV3TW9kZWwoYXJncykpO1xuXG5jbGFzcyBJbWFnZURpZmZWaWV3TW9kZWwge1xuICBjb25zdHJ1Y3RvcihhcmdzKSB7XG4gICAgdGhpcy5maWxlbmFtZSA9IGFyZ3MuZmlsZW5hbWU7XG4gICAgdGhpcy5vbGRGaWxlbmFtZSA9IGFyZ3Mub2xkRmlsZW5hbWU7XG4gICAgdGhpcy5yZXBvUGF0aCA9IGFyZ3MucmVwb1BhdGg7XG4gICAgdGhpcy5pc05ldyA9IGtvLm9ic2VydmFibGUoZmFsc2UpO1xuICAgIHRoaXMuaXNSZW1vdmVkID0ga28ub2JzZXJ2YWJsZShmYWxzZSk7XG4gICAgdGhpcy5zaGExID0gYXJncy5zaGExO1xuICAgIHRoaXMuc3RhdGUgPSBrby5jb21wdXRlZCgoKSA9PiB7XG4gICAgICBpZiAodGhpcy5pc05ldygpKSByZXR1cm4gJ25ldyc7XG4gICAgICBpZiAodGhpcy5pc1JlbW92ZWQoKSkgcmV0dXJuICdyZW1vdmVkJztcbiAgICAgIHJldHVybiAnY2hhbmdlZCc7XG4gICAgfSk7XG4gICAgY29uc3QgZ2l0RGlmZlVSTCA9IGAke3VuZ2l0LmNvbmZpZy5yb290UGF0aH0vYXBpL2RpZmYvaW1hZ2U/cGF0aD0ke2VuY29kZVVSSUNvbXBvbmVudCh0aGlzLnJlcG9QYXRoKCkpfWA7XG4gICAgdGhpcy5vbGRJbWFnZVNyYyA9IGdpdERpZmZVUkwgKyBgJmZpbGVuYW1lPSR7dGhpcy5vbGRGaWxlbmFtZX0mdmVyc2lvbj0keyh0aGlzLnNoYTEgPyB0aGlzLnNoYTEgKyAnXicgOiAnSEVBRCcpfWA7XG4gICAgdGhpcy5uZXdJbWFnZVNyYyA9IGdpdERpZmZVUkwgKyBgJmZpbGVuYW1lPSR7dGhpcy5maWxlbmFtZX0mdmVyc2lvbj0keyh0aGlzLnNoYTEgPyB0aGlzLnNoYTEgOiAnY3VycmVudCcpfWA7XG4gICAgdGhpcy5pc1Nob3dpbmdEaWZmcyA9IGFyZ3MuaXNTaG93aW5nRGlmZnM7XG4gICAgdGhpcy5yaWdodEFycm93SWNvbiA9IG9jdGljb25zWydhcnJvdy1yaWdodCddLnRvU1ZHKHsgJ2hlaWdodCc6IDEwMCB9KTtcbiAgICB0aGlzLmRvd25BcnJvd0ljb24gPSBvY3RpY29uc1snYXJyb3ctZG93biddLnRvU1ZHKHsgJ2hlaWdodCc6IDEwMCB9KTtcbiAgfVxuXG4gIHVwZGF0ZU5vZGUocGFyZW50RWxlbWVudCkge1xuICAgIGtvLnJlbmRlclRlbXBsYXRlKCdpbWFnZWRpZmYnLCB0aGlzLCB7fSwgcGFyZW50RWxlbWVudCk7XG4gIH1cblxuICBpbnZhbGlkYXRlRGlmZigpIHt9XG5cbiAgbmV3SW1hZ2VFcnJvcigpIHtcbiAgICB0aGlzLmlzUmVtb3ZlZCh0cnVlKTtcbiAgfVxuXG4gIG9sZEltYWdlRXJyb3IoKSB7XG4gICAgdGhpcy5pc05ldyh0cnVlKTtcbiAgfVxufVxuIl19
