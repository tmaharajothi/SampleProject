(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
const ko = require('knockout');
const components = require('ungit-components');
const addressParser = require('ungit-address-parser');
const navigation = require('ungit-navigation');
const programEvents = require('ungit-program-events');

components.register('path', (args) => {
  return new PathViewModel(args.server, args.path);
});

class PathViewModel {
  constructor(server, path) {
    this.server = server;
    this.repoPath = ko.observable(path);
    this.dirName = this.repoPath().replace(/\\/g, '/')
                     .split('/')
                     .filter((s) => s)
                     .slice(-1)[0] || '/';

    this.status = ko.observable('loading');
    this.cloneUrl = ko.observable();
    this.showDirectoryCreatedAlert = ko.observable(false);
    this.cloneDestinationImplicit = ko.computed(() => {
      const defaultText = 'destination folder';
      if (!this.cloneUrl()) return defaultText;

      const parsedAddress = addressParser.parseAddress(this.cloneUrl());
      return parsedAddress.shortProject || defaultText;
    });
    this.cloneDestination = ko.observable();
    this.repository = ko.observable();
    this.isRecursiveSubmodule = ko.observable(true);
  }

  updateNode(parentElement) {
    ko.renderTemplate('path', this, {}, parentElement);
  }
  shown() { this.updateStatus(); }
  updateAnimationFrame(deltaT) {
    if (this.repository()) this.repository().updateAnimationFrame(deltaT);
  }
  updateStatus() {
    return this.server.getPromise('/quickstatus', { path: this.repoPath() })
      .then((status) => {
        if (status.type == 'inited' || status.type == 'bare') {
          if (this.repoPath() !== status.gitRootPath) {
            this.repoPath(status.gitRootPath);
            programEvents.dispatch({ event: 'navigated-to-path', path: this.repoPath() });
            programEvents.dispatch({ event: 'working-tree-changed' });
          }
          this.status(status.type);
          if (!this.repository()) {
            this.repository(components.create('repository', { server: this.server, path: this }));
          }
        } else if (status.type == 'uninited' || status.type == 'no-such-path') {
          this.status(status.type);
          this.repository(null);
        }
        return null;
      }).catch((err) => { });
  }
  initRepository() {
    return this.server.postPromise('/init', { path: this.repoPath() })
      .catch((e) => this.server.unhandledRejection(e))
      .finally((res) => { this.updateStatus(); });
  }
  onProgramEvent(event) {
    if (event.event == 'working-tree-changed') this.updateStatus();
    else if (event.event == 'request-app-content-refresh') this.updateStatus();

    if (this.repository()) this.repository().onProgramEvent(event);
  }
  cloneRepository() {
    this.status('cloning');
    const dest = this.cloneDestination() || this.cloneDestinationImplicit();

    return this.server.postPromise('/clone', { path: this.repoPath(), url: this.cloneUrl(), destinationDir: dest, isRecursiveSubmodule: this.isRecursiveSubmodule() })
      .then((res) => navigation.browseTo('repository?path=' + encodeURIComponent(res.path)))
      .catch((e) => this.server.unhandledRejection(e))
      .finally(() => {
        programEvents.dispatch({ event: 'working-tree-changed' });
      });
  }
  createDir() {
    this.showDirectoryCreatedAlert(true);
    return this.server.postPromise('/createDir', { dir: this.repoPath() })
      .catch((e) => this.server.unhandledRejection(e))
      .then(() => this.updateStatus());
  }
}

},{"knockout":"knockout","ungit-address-parser":"ungit-address-parser","ungit-components":"ungit-components","ungit-navigation":"ungit-navigation","ungit-program-events":"ungit-program-events"}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJjb21wb25lbnRzL3BhdGgvcGF0aC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQ0FBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24oKXtmdW5jdGlvbiByKGUsbix0KXtmdW5jdGlvbiBvKGksZil7aWYoIW5baV0pe2lmKCFlW2ldKXt2YXIgYz1cImZ1bmN0aW9uXCI9PXR5cGVvZiByZXF1aXJlJiZyZXF1aXJlO2lmKCFmJiZjKXJldHVybiBjKGksITApO2lmKHUpcmV0dXJuIHUoaSwhMCk7dmFyIGE9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitpK1wiJ1wiKTt0aHJvdyBhLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsYX12YXIgcD1uW2ldPXtleHBvcnRzOnt9fTtlW2ldWzBdLmNhbGwocC5leHBvcnRzLGZ1bmN0aW9uKHIpe3ZhciBuPWVbaV1bMV1bcl07cmV0dXJuIG8obnx8cil9LHAscC5leHBvcnRzLHIsZSxuLHQpfXJldHVybiBuW2ldLmV4cG9ydHN9Zm9yKHZhciB1PVwiZnVuY3Rpb25cIj09dHlwZW9mIHJlcXVpcmUmJnJlcXVpcmUsaT0wO2k8dC5sZW5ndGg7aSsrKW8odFtpXSk7cmV0dXJuIG99cmV0dXJuIHJ9KSgpIiwiY29uc3Qga28gPSByZXF1aXJlKCdrbm9ja291dCcpO1xuY29uc3QgY29tcG9uZW50cyA9IHJlcXVpcmUoJ3VuZ2l0LWNvbXBvbmVudHMnKTtcbmNvbnN0IGFkZHJlc3NQYXJzZXIgPSByZXF1aXJlKCd1bmdpdC1hZGRyZXNzLXBhcnNlcicpO1xuY29uc3QgbmF2aWdhdGlvbiA9IHJlcXVpcmUoJ3VuZ2l0LW5hdmlnYXRpb24nKTtcbmNvbnN0IHByb2dyYW1FdmVudHMgPSByZXF1aXJlKCd1bmdpdC1wcm9ncmFtLWV2ZW50cycpO1xuXG5jb21wb25lbnRzLnJlZ2lzdGVyKCdwYXRoJywgKGFyZ3MpID0+IHtcbiAgcmV0dXJuIG5ldyBQYXRoVmlld01vZGVsKGFyZ3Muc2VydmVyLCBhcmdzLnBhdGgpO1xufSk7XG5cbmNsYXNzIFBhdGhWaWV3TW9kZWwge1xuICBjb25zdHJ1Y3RvcihzZXJ2ZXIsIHBhdGgpIHtcbiAgICB0aGlzLnNlcnZlciA9IHNlcnZlcjtcbiAgICB0aGlzLnJlcG9QYXRoID0ga28ub2JzZXJ2YWJsZShwYXRoKTtcbiAgICB0aGlzLmRpck5hbWUgPSB0aGlzLnJlcG9QYXRoKCkucmVwbGFjZSgvXFxcXC9nLCAnLycpXG4gICAgICAgICAgICAgICAgICAgICAuc3BsaXQoJy8nKVxuICAgICAgICAgICAgICAgICAgICAgLmZpbHRlcigocykgPT4gcylcbiAgICAgICAgICAgICAgICAgICAgIC5zbGljZSgtMSlbMF0gfHwgJy8nO1xuXG4gICAgdGhpcy5zdGF0dXMgPSBrby5vYnNlcnZhYmxlKCdsb2FkaW5nJyk7XG4gICAgdGhpcy5jbG9uZVVybCA9IGtvLm9ic2VydmFibGUoKTtcbiAgICB0aGlzLnNob3dEaXJlY3RvcnlDcmVhdGVkQWxlcnQgPSBrby5vYnNlcnZhYmxlKGZhbHNlKTtcbiAgICB0aGlzLmNsb25lRGVzdGluYXRpb25JbXBsaWNpdCA9IGtvLmNvbXB1dGVkKCgpID0+IHtcbiAgICAgIGNvbnN0IGRlZmF1bHRUZXh0ID0gJ2Rlc3RpbmF0aW9uIGZvbGRlcic7XG4gICAgICBpZiAoIXRoaXMuY2xvbmVVcmwoKSkgcmV0dXJuIGRlZmF1bHRUZXh0O1xuXG4gICAgICBjb25zdCBwYXJzZWRBZGRyZXNzID0gYWRkcmVzc1BhcnNlci5wYXJzZUFkZHJlc3ModGhpcy5jbG9uZVVybCgpKTtcbiAgICAgIHJldHVybiBwYXJzZWRBZGRyZXNzLnNob3J0UHJvamVjdCB8fCBkZWZhdWx0VGV4dDtcbiAgICB9KTtcbiAgICB0aGlzLmNsb25lRGVzdGluYXRpb24gPSBrby5vYnNlcnZhYmxlKCk7XG4gICAgdGhpcy5yZXBvc2l0b3J5ID0ga28ub2JzZXJ2YWJsZSgpO1xuICAgIHRoaXMuaXNSZWN1cnNpdmVTdWJtb2R1bGUgPSBrby5vYnNlcnZhYmxlKHRydWUpO1xuICB9XG5cbiAgdXBkYXRlTm9kZShwYXJlbnRFbGVtZW50KSB7XG4gICAga28ucmVuZGVyVGVtcGxhdGUoJ3BhdGgnLCB0aGlzLCB7fSwgcGFyZW50RWxlbWVudCk7XG4gIH1cbiAgc2hvd24oKSB7IHRoaXMudXBkYXRlU3RhdHVzKCk7IH1cbiAgdXBkYXRlQW5pbWF0aW9uRnJhbWUoZGVsdGFUKSB7XG4gICAgaWYgKHRoaXMucmVwb3NpdG9yeSgpKSB0aGlzLnJlcG9zaXRvcnkoKS51cGRhdGVBbmltYXRpb25GcmFtZShkZWx0YVQpO1xuICB9XG4gIHVwZGF0ZVN0YXR1cygpIHtcbiAgICByZXR1cm4gdGhpcy5zZXJ2ZXIuZ2V0UHJvbWlzZSgnL3F1aWNrc3RhdHVzJywgeyBwYXRoOiB0aGlzLnJlcG9QYXRoKCkgfSlcbiAgICAgIC50aGVuKChzdGF0dXMpID0+IHtcbiAgICAgICAgaWYgKHN0YXR1cy50eXBlID09ICdpbml0ZWQnIHx8IHN0YXR1cy50eXBlID09ICdiYXJlJykge1xuICAgICAgICAgIGlmICh0aGlzLnJlcG9QYXRoKCkgIT09IHN0YXR1cy5naXRSb290UGF0aCkge1xuICAgICAgICAgICAgdGhpcy5yZXBvUGF0aChzdGF0dXMuZ2l0Um9vdFBhdGgpO1xuICAgICAgICAgICAgcHJvZ3JhbUV2ZW50cy5kaXNwYXRjaCh7IGV2ZW50OiAnbmF2aWdhdGVkLXRvLXBhdGgnLCBwYXRoOiB0aGlzLnJlcG9QYXRoKCkgfSk7XG4gICAgICAgICAgICBwcm9ncmFtRXZlbnRzLmRpc3BhdGNoKHsgZXZlbnQ6ICd3b3JraW5nLXRyZWUtY2hhbmdlZCcgfSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRoaXMuc3RhdHVzKHN0YXR1cy50eXBlKTtcbiAgICAgICAgICBpZiAoIXRoaXMucmVwb3NpdG9yeSgpKSB7XG4gICAgICAgICAgICB0aGlzLnJlcG9zaXRvcnkoY29tcG9uZW50cy5jcmVhdGUoJ3JlcG9zaXRvcnknLCB7IHNlcnZlcjogdGhpcy5zZXJ2ZXIsIHBhdGg6IHRoaXMgfSkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChzdGF0dXMudHlwZSA9PSAndW5pbml0ZWQnIHx8IHN0YXR1cy50eXBlID09ICduby1zdWNoLXBhdGgnKSB7XG4gICAgICAgICAgdGhpcy5zdGF0dXMoc3RhdHVzLnR5cGUpO1xuICAgICAgICAgIHRoaXMucmVwb3NpdG9yeShudWxsKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH0pLmNhdGNoKChlcnIpID0+IHsgfSk7XG4gIH1cbiAgaW5pdFJlcG9zaXRvcnkoKSB7XG4gICAgcmV0dXJuIHRoaXMuc2VydmVyLnBvc3RQcm9taXNlKCcvaW5pdCcsIHsgcGF0aDogdGhpcy5yZXBvUGF0aCgpIH0pXG4gICAgICAuY2F0Y2goKGUpID0+IHRoaXMuc2VydmVyLnVuaGFuZGxlZFJlamVjdGlvbihlKSlcbiAgICAgIC5maW5hbGx5KChyZXMpID0+IHsgdGhpcy51cGRhdGVTdGF0dXMoKTsgfSk7XG4gIH1cbiAgb25Qcm9ncmFtRXZlbnQoZXZlbnQpIHtcbiAgICBpZiAoZXZlbnQuZXZlbnQgPT0gJ3dvcmtpbmctdHJlZS1jaGFuZ2VkJykgdGhpcy51cGRhdGVTdGF0dXMoKTtcbiAgICBlbHNlIGlmIChldmVudC5ldmVudCA9PSAncmVxdWVzdC1hcHAtY29udGVudC1yZWZyZXNoJykgdGhpcy51cGRhdGVTdGF0dXMoKTtcblxuICAgIGlmICh0aGlzLnJlcG9zaXRvcnkoKSkgdGhpcy5yZXBvc2l0b3J5KCkub25Qcm9ncmFtRXZlbnQoZXZlbnQpO1xuICB9XG4gIGNsb25lUmVwb3NpdG9yeSgpIHtcbiAgICB0aGlzLnN0YXR1cygnY2xvbmluZycpO1xuICAgIGNvbnN0IGRlc3QgPSB0aGlzLmNsb25lRGVzdGluYXRpb24oKSB8fCB0aGlzLmNsb25lRGVzdGluYXRpb25JbXBsaWNpdCgpO1xuXG4gICAgcmV0dXJuIHRoaXMuc2VydmVyLnBvc3RQcm9taXNlKCcvY2xvbmUnLCB7IHBhdGg6IHRoaXMucmVwb1BhdGgoKSwgdXJsOiB0aGlzLmNsb25lVXJsKCksIGRlc3RpbmF0aW9uRGlyOiBkZXN0LCBpc1JlY3Vyc2l2ZVN1Ym1vZHVsZTogdGhpcy5pc1JlY3Vyc2l2ZVN1Ym1vZHVsZSgpIH0pXG4gICAgICAudGhlbigocmVzKSA9PiBuYXZpZ2F0aW9uLmJyb3dzZVRvKCdyZXBvc2l0b3J5P3BhdGg9JyArIGVuY29kZVVSSUNvbXBvbmVudChyZXMucGF0aCkpKVxuICAgICAgLmNhdGNoKChlKSA9PiB0aGlzLnNlcnZlci51bmhhbmRsZWRSZWplY3Rpb24oZSkpXG4gICAgICAuZmluYWxseSgoKSA9PiB7XG4gICAgICAgIHByb2dyYW1FdmVudHMuZGlzcGF0Y2goeyBldmVudDogJ3dvcmtpbmctdHJlZS1jaGFuZ2VkJyB9KTtcbiAgICAgIH0pO1xuICB9XG4gIGNyZWF0ZURpcigpIHtcbiAgICB0aGlzLnNob3dEaXJlY3RvcnlDcmVhdGVkQWxlcnQodHJ1ZSk7XG4gICAgcmV0dXJuIHRoaXMuc2VydmVyLnBvc3RQcm9taXNlKCcvY3JlYXRlRGlyJywgeyBkaXI6IHRoaXMucmVwb1BhdGgoKSB9KVxuICAgICAgLmNhdGNoKChlKSA9PiB0aGlzLnNlcnZlci51bmhhbmRsZWRSZWplY3Rpb24oZSkpXG4gICAgICAudGhlbigoKSA9PiB0aGlzLnVwZGF0ZVN0YXR1cygpKTtcbiAgfVxufVxuIl19
