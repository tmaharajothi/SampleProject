(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
const ko = require('knockout');
const md5 = require('blueimp-md5');
const moment = require('moment');
const octicons = require('octicons');
const components = require('ungit-components');

components.register('commit', args => new CommitViewModel(args));

class CommitViewModel {
  constructor(gitNode) {
    this.repoPath = gitNode.graph.repoPath;
    this.sha1 = gitNode.sha1;
    this.server = gitNode.graph.server;
    this.highlighted = gitNode.highlighted;
    this.nodeIsMousehover = gitNode.nodeIsMousehover;
    this.selected = gitNode.selected;
    this.pgpVerifiedString = gitNode.pgpVerifiedString;
    this.pgpIcon = octicons.verified.toSVG({ 'height': 18 });
    this.element = ko.observable();
    this.commitTime = ko.observable();
    this.authorTime = ko.observable();
    this.message = ko.observable();
    this.title = ko.observable();
    this.body = ko.observable();
    this.authorDate = ko.observable(0);
    this.authorDateFromNow = ko.observable();
    this.authorName = ko.observable();
    this.authorEmail = ko.observable();
    this.fileLineDiffs = ko.observable();
    this.numberOfAddedLines = ko.observable();
    this.numberOfRemovedLines = ko.observable();
    this.authorGravatar = ko.computed(() => md5((this.authorEmail() || '').trim().toLowerCase()));

    this.showCommitDiff = ko.computed(() => this.fileLineDiffs() && this.fileLineDiffs().length > 0);

    this.diffStyle = ko.computed(() => {
      const marginLeft = Math.min((gitNode.branchOrder() * 70), 450) * -1;
      if (this.selected() && this.element()) return { 'margin-left': `${marginLeft}px`, width: `${window.innerWidth - 220}px` };
      else return {};
    });
  }

  updateNode(parentElement) {
    ko.renderTemplate('commit', this, {}, parentElement);
  }

  setData(args) {
    this.commitTime(moment(new Date(args.commitDate)));
    this.authorTime(moment(new Date(args.authorDate)));
    const message = args.message.split('\n');
    this.message(args.message);
    this.title(message[0]);
    this.body(message.slice((message[1] ? 1 : 2)).join('\n'));
    this.authorDate(moment(new Date(args.authorDate)));
    this.authorDateFromNow(this.authorDate().fromNow());
    this.authorName(args.authorName);
    this.authorEmail(args.authorEmail);
    this.numberOfAddedLines(args.total.additions);
    this.numberOfRemovedLines(args.total.deletions);
    this.fileLineDiffs(args.fileLineDiffs);
    this.isInited = true;
    this.commitDiff = ko.observable(components.create('commitDiff', {
      fileLineDiffs: this.fileLineDiffs(),
      sha1: this.sha1,
      repoPath: this.repoPath,
      server: this.server,
      showDiffButtons: this.selected
    }));
  }

  updateLastAuthorDateFromNow(deltaT) {
    this.lastUpdatedAuthorDateFromNow = this.lastUpdatedAuthorDateFromNow || 0;
    this.lastUpdatedAuthorDateFromNow += deltaT;
    if(this.lastUpdatedAuthorDateFromNow > 60 * 1000) {
      this.lastUpdatedAuthorDateFromNow = 0;
      this.authorDateFromNow(this.authorDate().fromNow());
    }
  }

  updateAnimationFrame(deltaT) {
    this.updateLastAuthorDateFromNow(deltaT);
  }

  stopClickPropagation(data, event) {
    event.stopImmediatePropagation();
  }
}

},{"blueimp-md5":"blueimp-md5","knockout":"knockout","moment":"moment","octicons":undefined,"ungit-components":"ungit-components"}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJjb21wb25lbnRzL2NvbW1pdC9jb21taXQuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUNBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uKCl7ZnVuY3Rpb24gcihlLG4sdCl7ZnVuY3Rpb24gbyhpLGYpe2lmKCFuW2ldKXtpZighZVtpXSl7dmFyIGM9XCJmdW5jdGlvblwiPT10eXBlb2YgcmVxdWlyZSYmcmVxdWlyZTtpZighZiYmYylyZXR1cm4gYyhpLCEwKTtpZih1KXJldHVybiB1KGksITApO3ZhciBhPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIraStcIidcIik7dGhyb3cgYS5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGF9dmFyIHA9bltpXT17ZXhwb3J0czp7fX07ZVtpXVswXS5jYWxsKHAuZXhwb3J0cyxmdW5jdGlvbihyKXt2YXIgbj1lW2ldWzFdW3JdO3JldHVybiBvKG58fHIpfSxwLHAuZXhwb3J0cyxyLGUsbix0KX1yZXR1cm4gbltpXS5leHBvcnRzfWZvcih2YXIgdT1cImZ1bmN0aW9uXCI9PXR5cGVvZiByZXF1aXJlJiZyZXF1aXJlLGk9MDtpPHQubGVuZ3RoO2krKylvKHRbaV0pO3JldHVybiBvfXJldHVybiByfSkoKSIsImNvbnN0IGtvID0gcmVxdWlyZSgna25vY2tvdXQnKTtcbmNvbnN0IG1kNSA9IHJlcXVpcmUoJ2JsdWVpbXAtbWQ1Jyk7XG5jb25zdCBtb21lbnQgPSByZXF1aXJlKCdtb21lbnQnKTtcbmNvbnN0IG9jdGljb25zID0gcmVxdWlyZSgnb2N0aWNvbnMnKTtcbmNvbnN0IGNvbXBvbmVudHMgPSByZXF1aXJlKCd1bmdpdC1jb21wb25lbnRzJyk7XG5cbmNvbXBvbmVudHMucmVnaXN0ZXIoJ2NvbW1pdCcsIGFyZ3MgPT4gbmV3IENvbW1pdFZpZXdNb2RlbChhcmdzKSk7XG5cbmNsYXNzIENvbW1pdFZpZXdNb2RlbCB7XG4gIGNvbnN0cnVjdG9yKGdpdE5vZGUpIHtcbiAgICB0aGlzLnJlcG9QYXRoID0gZ2l0Tm9kZS5ncmFwaC5yZXBvUGF0aDtcbiAgICB0aGlzLnNoYTEgPSBnaXROb2RlLnNoYTE7XG4gICAgdGhpcy5zZXJ2ZXIgPSBnaXROb2RlLmdyYXBoLnNlcnZlcjtcbiAgICB0aGlzLmhpZ2hsaWdodGVkID0gZ2l0Tm9kZS5oaWdobGlnaHRlZDtcbiAgICB0aGlzLm5vZGVJc01vdXNlaG92ZXIgPSBnaXROb2RlLm5vZGVJc01vdXNlaG92ZXI7XG4gICAgdGhpcy5zZWxlY3RlZCA9IGdpdE5vZGUuc2VsZWN0ZWQ7XG4gICAgdGhpcy5wZ3BWZXJpZmllZFN0cmluZyA9IGdpdE5vZGUucGdwVmVyaWZpZWRTdHJpbmc7XG4gICAgdGhpcy5wZ3BJY29uID0gb2N0aWNvbnMudmVyaWZpZWQudG9TVkcoeyAnaGVpZ2h0JzogMTggfSk7XG4gICAgdGhpcy5lbGVtZW50ID0ga28ub2JzZXJ2YWJsZSgpO1xuICAgIHRoaXMuY29tbWl0VGltZSA9IGtvLm9ic2VydmFibGUoKTtcbiAgICB0aGlzLmF1dGhvclRpbWUgPSBrby5vYnNlcnZhYmxlKCk7XG4gICAgdGhpcy5tZXNzYWdlID0ga28ub2JzZXJ2YWJsZSgpO1xuICAgIHRoaXMudGl0bGUgPSBrby5vYnNlcnZhYmxlKCk7XG4gICAgdGhpcy5ib2R5ID0ga28ub2JzZXJ2YWJsZSgpO1xuICAgIHRoaXMuYXV0aG9yRGF0ZSA9IGtvLm9ic2VydmFibGUoMCk7XG4gICAgdGhpcy5hdXRob3JEYXRlRnJvbU5vdyA9IGtvLm9ic2VydmFibGUoKTtcbiAgICB0aGlzLmF1dGhvck5hbWUgPSBrby5vYnNlcnZhYmxlKCk7XG4gICAgdGhpcy5hdXRob3JFbWFpbCA9IGtvLm9ic2VydmFibGUoKTtcbiAgICB0aGlzLmZpbGVMaW5lRGlmZnMgPSBrby5vYnNlcnZhYmxlKCk7XG4gICAgdGhpcy5udW1iZXJPZkFkZGVkTGluZXMgPSBrby5vYnNlcnZhYmxlKCk7XG4gICAgdGhpcy5udW1iZXJPZlJlbW92ZWRMaW5lcyA9IGtvLm9ic2VydmFibGUoKTtcbiAgICB0aGlzLmF1dGhvckdyYXZhdGFyID0ga28uY29tcHV0ZWQoKCkgPT4gbWQ1KCh0aGlzLmF1dGhvckVtYWlsKCkgfHwgJycpLnRyaW0oKS50b0xvd2VyQ2FzZSgpKSk7XG5cbiAgICB0aGlzLnNob3dDb21taXREaWZmID0ga28uY29tcHV0ZWQoKCkgPT4gdGhpcy5maWxlTGluZURpZmZzKCkgJiYgdGhpcy5maWxlTGluZURpZmZzKCkubGVuZ3RoID4gMCk7XG5cbiAgICB0aGlzLmRpZmZTdHlsZSA9IGtvLmNvbXB1dGVkKCgpID0+IHtcbiAgICAgIGNvbnN0IG1hcmdpbkxlZnQgPSBNYXRoLm1pbigoZ2l0Tm9kZS5icmFuY2hPcmRlcigpICogNzApLCA0NTApICogLTE7XG4gICAgICBpZiAodGhpcy5zZWxlY3RlZCgpICYmIHRoaXMuZWxlbWVudCgpKSByZXR1cm4geyAnbWFyZ2luLWxlZnQnOiBgJHttYXJnaW5MZWZ0fXB4YCwgd2lkdGg6IGAke3dpbmRvdy5pbm5lcldpZHRoIC0gMjIwfXB4YCB9O1xuICAgICAgZWxzZSByZXR1cm4ge307XG4gICAgfSk7XG4gIH1cblxuICB1cGRhdGVOb2RlKHBhcmVudEVsZW1lbnQpIHtcbiAgICBrby5yZW5kZXJUZW1wbGF0ZSgnY29tbWl0JywgdGhpcywge30sIHBhcmVudEVsZW1lbnQpO1xuICB9XG5cbiAgc2V0RGF0YShhcmdzKSB7XG4gICAgdGhpcy5jb21taXRUaW1lKG1vbWVudChuZXcgRGF0ZShhcmdzLmNvbW1pdERhdGUpKSk7XG4gICAgdGhpcy5hdXRob3JUaW1lKG1vbWVudChuZXcgRGF0ZShhcmdzLmF1dGhvckRhdGUpKSk7XG4gICAgY29uc3QgbWVzc2FnZSA9IGFyZ3MubWVzc2FnZS5zcGxpdCgnXFxuJyk7XG4gICAgdGhpcy5tZXNzYWdlKGFyZ3MubWVzc2FnZSk7XG4gICAgdGhpcy50aXRsZShtZXNzYWdlWzBdKTtcbiAgICB0aGlzLmJvZHkobWVzc2FnZS5zbGljZSgobWVzc2FnZVsxXSA/IDEgOiAyKSkuam9pbignXFxuJykpO1xuICAgIHRoaXMuYXV0aG9yRGF0ZShtb21lbnQobmV3IERhdGUoYXJncy5hdXRob3JEYXRlKSkpO1xuICAgIHRoaXMuYXV0aG9yRGF0ZUZyb21Ob3codGhpcy5hdXRob3JEYXRlKCkuZnJvbU5vdygpKTtcbiAgICB0aGlzLmF1dGhvck5hbWUoYXJncy5hdXRob3JOYW1lKTtcbiAgICB0aGlzLmF1dGhvckVtYWlsKGFyZ3MuYXV0aG9yRW1haWwpO1xuICAgIHRoaXMubnVtYmVyT2ZBZGRlZExpbmVzKGFyZ3MudG90YWwuYWRkaXRpb25zKTtcbiAgICB0aGlzLm51bWJlck9mUmVtb3ZlZExpbmVzKGFyZ3MudG90YWwuZGVsZXRpb25zKTtcbiAgICB0aGlzLmZpbGVMaW5lRGlmZnMoYXJncy5maWxlTGluZURpZmZzKTtcbiAgICB0aGlzLmlzSW5pdGVkID0gdHJ1ZTtcbiAgICB0aGlzLmNvbW1pdERpZmYgPSBrby5vYnNlcnZhYmxlKGNvbXBvbmVudHMuY3JlYXRlKCdjb21taXREaWZmJywge1xuICAgICAgZmlsZUxpbmVEaWZmczogdGhpcy5maWxlTGluZURpZmZzKCksXG4gICAgICBzaGExOiB0aGlzLnNoYTEsXG4gICAgICByZXBvUGF0aDogdGhpcy5yZXBvUGF0aCxcbiAgICAgIHNlcnZlcjogdGhpcy5zZXJ2ZXIsXG4gICAgICBzaG93RGlmZkJ1dHRvbnM6IHRoaXMuc2VsZWN0ZWRcbiAgICB9KSk7XG4gIH1cblxuICB1cGRhdGVMYXN0QXV0aG9yRGF0ZUZyb21Ob3coZGVsdGFUKSB7XG4gICAgdGhpcy5sYXN0VXBkYXRlZEF1dGhvckRhdGVGcm9tTm93ID0gdGhpcy5sYXN0VXBkYXRlZEF1dGhvckRhdGVGcm9tTm93IHx8IDA7XG4gICAgdGhpcy5sYXN0VXBkYXRlZEF1dGhvckRhdGVGcm9tTm93ICs9IGRlbHRhVDtcbiAgICBpZih0aGlzLmxhc3RVcGRhdGVkQXV0aG9yRGF0ZUZyb21Ob3cgPiA2MCAqIDEwMDApIHtcbiAgICAgIHRoaXMubGFzdFVwZGF0ZWRBdXRob3JEYXRlRnJvbU5vdyA9IDA7XG4gICAgICB0aGlzLmF1dGhvckRhdGVGcm9tTm93KHRoaXMuYXV0aG9yRGF0ZSgpLmZyb21Ob3coKSk7XG4gICAgfVxuICB9XG5cbiAgdXBkYXRlQW5pbWF0aW9uRnJhbWUoZGVsdGFUKSB7XG4gICAgdGhpcy51cGRhdGVMYXN0QXV0aG9yRGF0ZUZyb21Ob3coZGVsdGFUKTtcbiAgfVxuXG4gIHN0b3BDbGlja1Byb3BhZ2F0aW9uKGRhdGEsIGV2ZW50KSB7XG4gICAgZXZlbnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG4gIH1cbn1cbiJdfQ==
